  
    /**    
    * @Title: CulpritService.java  
    * @Package com.rowell.sifa.service.culpritinfo  
    * @Description: TODO(用一句话描述该文件做什么)  
    * @author xiaoguang  
    * @date 2017年1月19日  
    * @version V1.0    
    */  
    
package com.rowell.sifa.service.culpritinfo;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.rowell.common.pojo.EasyUITreeNode;
import com.rowell.common.pojo.echarts.EchartsJsonResult;
import com.rowell.common.pojo.echarts.LineEchartsJsonResult;
import com.rowell.common.utils.DateUtils;
import com.rowell.sifa.common.utils.SysAccountUtils;
import com.rowell.sifa.mapper.culpritinfo.CulpritMapper;
import com.rowell.sifa.mapper.dailymgr.AskLeaveMapper;
import com.rowell.sifa.mapper.endcorrect.DeathMapper;
import com.rowell.sifa.mapper.endcorrect.FinishRedressMapper;
import com.rowell.sifa.mapper.endcorrect.ImprisonMapper;
import com.rowell.sifa.mapper.endcorrect.OutOfMapper;
import com.rowell.sifa.mapper.endcorrect.RecidivismMapper;
import com.rowell.sifa.mapper.rewardspunishment.RevokeParoleMapper;
import com.rowell.sifa.mapper.rewardspunishment.RevokeProbationMapper;
import com.rowell.sifa.pojo.culpritinfo.Culprit;
import com.rowell.sifa.pojo.dailymgr.AskLeave;
import com.rowell.sifa.pojo.endcorrect.Death;
import com.rowell.sifa.pojo.endcorrect.FinishRedress;
import com.rowell.sifa.pojo.endcorrect.Imprison;
import com.rowell.sifa.pojo.endcorrect.OutOf;
import com.rowell.sifa.pojo.endcorrect.Recidivism;
import com.rowell.sifa.pojo.rewardspunishment.RevokeParole;
import com.rowell.sifa.pojo.rewardspunishment.RevokeProbation;
import com.rowell.sifa.pojo.sys.SysAccount;
import com.rowell.sifa.service.base.CrudService;

/**  
    * @ClassName: CulpritService  
    * @Description: TODO矫正对象service层 
    * @author xiaoguang  
    * @date 2017年1月19日  
    *    
    */
@Service
@Transactional(readOnly = true)
public class CulpritService extends CrudService<CulpritMapper, Culprit> {
	@Autowired
   	private AskLeaveMapper askLeaveMapper;
	@Autowired
   	private FinishRedressMapper finishRedressMapper;
	@Autowired
   	private OutOfMapper outOfMapper;
	@Autowired
   	private RevokeProbationMapper revokeProbationMapper;
	@Autowired
   	private RevokeParoleMapper revokeParoleMapper;
	@Autowired
   	private ImprisonMapper imprisonMapper;
	@Autowired
   	private DeathMapper deathMapper;
	@Autowired
   	private RecidivismMapper recidivismMapper;
	
	public List<EasyUITreeNode> findNames() {
		List<EasyUITreeNode> list=dao.findNames();
		return list;
	}
	
	public Integer findNumByGroupId(String groupId){
		return dao.findNumByGroupId(groupId);
	}
	//根据登录账号查询该账号所在部门下所有犯人
	public List<Culprit> findCulpritBySysAccount(String groupId){
		return dao.findCulpritBySysAccount(groupId);
	};
	
	public List<Culprit> findAllWithTerminal(Culprit culprit){
		return dao.selectAllWithTerminal(culprit);
	};
	
	//根据登录账号查询该账号所在部门下所有犯人(含查询功能)
		public List<Culprit> findAllByGroupId(Culprit culprit){
			return dao.selectAllByGroupId(culprit);
		};
	 public String getCulpritNo(int num,String groupId){
		 Calendar a=Calendar.getInstance();
		 a.get(Calendar.YEAR);
		 Integer a1 = num;//转换为包装类Integer
		 int numLength=a1.toString().length();
		 String str=num+"";
		 int idLength = groupId.length();
		 String str2=groupId;
		 while(numLength<4){
			 str="0"+str;
			 numLength++;
		 }
		 while(idLength<4){
			 str2="0"+str2;
			 idLength++;
		 }
		 return a.get(Calendar.YEAR)+str2+str;
	 }
	 
	 public List<Culprit> selectAllSimple(Culprit culprit){
		return  dao.selectAllSimple(culprit);
	 }
	 
	 public List<Map<String,String>> groupBySex(){
		 return dao.groupBySex();
	 }
	 public List<Map<String,String>> groupByAge(){
		 return dao.groupByAge();
	 }


	 public List<Culprit> findByGroupIdAndRandom(String groupId, String amount, Date checkStartTime, Date checkEndTime){
			return dao.findByGroupIdAndRandom(groupId, amount, checkStartTime, checkEndTime);
		};
		

		/***
		 * 
		    * @Title: selectOnlyCulpritInfo  
		    * @Description: 查询仅返回矫正对象信息
		    * @param @param culprit
		    * @param @return    参数  
		    * @return List<Culprit>    返回类型  
		    * @throws
		 */
		public List<Culprit> selectOnlyCulpritInfo(Culprit culprit){
			return dao.selectOnlyCulpritInfo(culprit);
		}
		
		/**
		 * 按年统计人员
		 * @param culprit
		 * @return
		 */
		public List<Culprit> statisticsCulpritByYear(Culprit culprit){
			return dao.statisticsCulpritByYear(culprit);
		}
			
		/**
		 * 按月统计人员
		 * @param culprit
		 * @return
		 */
		@SuppressWarnings("unchecked")
		public EchartsJsonResult<Integer> statisticsCulpritByMonth(Culprit culprit){
			List<Map<String,Object>> results = dao.statisticsCulpritByMonth(culprit);
			EchartsJsonResult<Integer> echartsJsonResult = new LineEchartsJsonResult();
			echartsJsonResult.fillEchartsJsonResultData(echartsJsonResult, results);
			return echartsJsonResult;
		}
		
		/**
		 * 按刑罚执行类别统计
		 * @return
		 */
		public List<Culprit> statisticsPenalType(Culprit culprit){
			return dao.statisticsPenalType(culprit);
		}
		
		/**
		 * 按犯罪类型统计
		 * @return
		 */
		public List<Culprit> statisticsCrimeType(Culprit culprit){
			return dao.statisticsCrimeType(culprit);
		}
		
		/**
		 * 按户籍情况统计
		 * @return
		 */
		public List<Culprit> statisticsCulpritByHjqk(Culprit culprit){
			return dao.statisticsCulpritByHjqk(culprit);
		}
		
		/**
		 * 按婚姻统计
		 * @return
		 */
		public List<Culprit> statisticsCulpritByHyzk(Culprit culprit){
			return dao.statisticsCulpritByHyzk(culprit);
		}
		
		/**
		 * 按政治面貌统计
		 * @return
		 */
		public List<Culprit> statisticsCulpritByYzzmm(Culprit culprit){
			return dao.statisticsCulpritByYzzmm(culprit);
		}
		
		/**
		 * 按监管等级统计
		 * @return
		 */
		public List<Culprit> statisticsCulpritByMonitorGradeKey(Culprit culprit){
			return dao.statisticsCulpritByMonitorGradeKey(culprit);
		}
		
		/**
		 * 按性别统计
		 * @return
		 */
		public List<Culprit> statisticsCulpritBySex(Culprit culprit){
			return dao.statisticsCulpritBySex(culprit);
		}
		
		/**
		 * 文化程度
		 * @return
		 */
		public List<Culprit> statisticsCulpritByWhcd(Culprit culprit){
			return dao.statisticsCulpritByWhcd(culprit);
		}
		     
		/**
		 * 按地区统计
		 * @return
		 */
		public List<Culprit> statisticsCulpritByArea(Culprit culprit){
			return dao.statisticsCulpritByArea(culprit);
		}
		
		/**
		 * 按矫正对象状态统计
		 * @return
		 */
		public List<Culprit> statisticsCulpritByStatus(Culprit culprit){
			return dao.statisticsCulpritByStatus(culprit);
		}
		
		/**
		 * 30天内需解矫人数
		 * @return
		 */
		public int getFinishCountBy30Day(){
			return dao.getFinishCountBy30Day();
		}
		
		/**
		 * 本月入矫人数
		 * @return
		 */
		public int getStartCountByThisMonth(){
			return dao.getStartCountByThisMonth();
		}
		
		/**
		 * 昨日入娇人数
		 * @return
		 */
		public int getStartCountByYesterday(){
			return dao.getStartCountByYesterday();
		}
		
		/**
		 * 在矫人数
		 * @param culprit
		 * @return
		 */
		public int getCulpritByStatus(Culprit culprit){
			return dao.getCulpritByStatus(culprit);
		}
		
		/**
		 * 按接收方式统计
		 * @return
		 */
		public List<Culprit> statisticsCulpritByJsfs(Culprit culprit){
			return dao.statisticsCulpritByJsfs(culprit);
		}
		
		
		public List<Culprit> statisticsFinishByLastMonth(){
			List<Culprit> culpritList=new ArrayList<Culprit>();
			
			Date searchStartDate=DateUtils.getLastMonthFirstDay();
			Date searchEndDate=DateUtils.getLastMonthLastDay();
			
			long count=0;
			SysAccount sysAccount = SysAccountUtils.getSysAccount();
			
			Culprit culprit=new Culprit();
			AskLeave askLeave=new AskLeave();
			askLeave.setGroupId(sysAccount.getGroupId());
			askLeave.setSearchStartDate(searchStartDate);
			askLeave.setSearchEndDate(searchEndDate);
			count=new Long(askLeaveMapper.getCount(askLeave));
			if(count>0){
				culprit.setCount(count);
				culprit.setTypeName("外出请假");
				culpritList.add(culprit);
			}
			
			
			
			culprit=new Culprit();
			FinishRedress finishRedress=new FinishRedress();
			finishRedress.setGroupId(sysAccount.getGroupId());
			finishRedress.setSearchStartDate(searchStartDate);
			finishRedress.setSearchEndDate(searchEndDate);
			count=new Long(finishRedressMapper.getCount(finishRedress));
			if(count>0){
				culprit.setCount(count);
				culprit.setTypeName("期满解矫");
				culpritList.add(culprit);
			}

			
			culprit=new Culprit();
			OutOf outOf=new OutOf();
			outOf.setGroupId(sysAccount.getGroupId());
			outOf.setStarMoveTime(searchStartDate);
			outOf.setEndMoveTime(searchEndDate);
			count=new Long(outOfMapper.getCount(outOf));
			if(count>0){
				culprit.setCount(count);
				culprit.setTypeName("迁居迁出");
				culpritList.add(culprit);
			}

			
			culprit=new Culprit();
			RevokeProbation revokeProbation=new RevokeProbation();
			revokeProbation.setGroupId(sysAccount.getGroupId());
			revokeProbation.setStartCreateDate(searchStartDate);
			revokeProbation.setEndCreateDate(searchEndDate);
			count=new Long(revokeProbationMapper.getCount(revokeProbation));
			if(count>0){
				culprit.setCount(count);
				culprit.setTypeName("撤销缓刑");
				culpritList.add(culprit);
			}

			
			culprit=new Culprit();
			RevokeParole revokeParole=new RevokeParole();
			revokeParole.setGroupId(sysAccount.getGroupId());
			revokeParole.setSearchStartDate(searchStartDate);
			revokeParole.setSearchEndDate(searchEndDate);
			count=new Long(revokeParoleMapper.getCount(revokeParole));
			if(count>0){
				culprit.setCount(count);
				culprit.setTypeName("撤销假释");
				culpritList.add(culprit);
			}
			
			culprit=new Culprit();
			Imprison imprison=new Imprison();
			imprison.setGroupId(sysAccount.getGroupId());
			imprison.setSearchStartDate(searchStartDate);
			imprison.setSearchEndDate(searchEndDate);
			count=new Long(imprisonMapper.getCount(imprison));
			if(count>0){
				culprit.setCount(count);
				culprit.setTypeName("收监执行");
				culpritList.add(culprit);
			}
			
			culprit=new Culprit();
			Death death=new Death();
			death.setGroupId(sysAccount.getGroupId());
			death.setSearchStartDate(searchStartDate);
			death.setSearchEndDate(searchEndDate);
			count=new Long(deathMapper.getCount(death));
			if(count>0){
				culprit.setCount(count);
				culprit.setTypeName("死亡登记");
				culpritList.add(culprit);
			}
			
			culprit=new Culprit();
			Recidivism recidivism=new Recidivism();
			recidivism.setGroupId(sysAccount.getGroupId());
			recidivism.setSearchStartDate(searchStartDate);
			recidivism.setSearchEndDate(searchEndDate);
			count=new Long(recidivismMapper.getCount(recidivism));
			if(count>0){
				culprit.setCount(count);
				culprit.setTypeName("再犯新罪");
				culpritList.add(culprit);
			}
			
			return culpritList;
			
		}

}
